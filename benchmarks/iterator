#!/usr/bin/env php
<?php

require_once(__DIR__ . '/Utilities.php');
require_once(__DIR__ . '/../vendor/autoload.php');

use CardinalCollections\Mutable\Set;

function stressArray(int $count)
{
    $set = [];
    $offset = 13;
    for ($i = $offset; $i < $offset + $count; $i++) {
        $set[$i] = true;
        if ($i % 2 === 1) {
            unset($set[$i]);
        }
    }
    return $set;
}

function stressSplObjectStorage(array $objects)
{
    $s = new SplObjectStorage();
    for ($i = 0; $i < count($objects); $i++) {
        $s->attach($objects[$i]);
        if ($i % 2 === 1) {
            $s->detach($objects[$i - 1]);
        }
    }
    return $s;
}


function stressIterator(string $iteratorClass, int $count)
{
    $set = new Set([], $iteratorClass);
    $offset = 13;
    for ($i = $offset; $i < $offset + $count; $i++) {
        $set->add($i);
        if ($i % 2 === 1) {
            $set->remove($i - 1);
        }
    }
    return $set;
}

function stressIteratorObjects(string $iteratorClass, array $objects)
{
    $set = new Set([], $iteratorClass);
    for ($i = 0; $i < count($objects); $i++) {
        $set->add($objects[$i]);
        if ($i % 2 === 1) {
            $set->remove($objects[$i - 1]);
        }
    }
    return $set;
}

function benchmarkArray(int $count)
{
    echo "==> PHP array of $count integers:" . PHP_EOL;
    $memStart = linuxRssUsage();
    $start = microtime(true);
    $result = stressArray($count);
    $duration = microtime(true) - $start;
    $mem = linuxRssUsage() - $memStart;
    printf("Time: %0.4f seconds\nMemory: %d bytes\n", $duration, $mem);
    if (count($result) > 0) {
        gc_collect_cycles();
        flush();
        sleep(1);
    }
}

function benchmarkSplObjectStorage(int $count)
{
    $objects = [];
    for ($i = 0; $i < $count; $i++) {
        $objects[] = new StdClass;
    }
    echo "==> SplObjectStorage over a set of $count objects:" . PHP_EOL;
    $memStart = linuxRssUsage();
    $start = microtime(true);
    $result = stressSplObjectStorage($objects);
    $duration = microtime(true) - $start;
    $mem = linuxRssUsage() - $memStart;
    printf("Time: %0.4f seconds\nMemory: %d bytes\n", $duration, $mem);
    if (count($result) > 0) {
        gc_collect_cycles();
        flush();
        sleep(1);
    }
}

function benchmarkIterator(string $iteratorClass, int $count)
{
    echo "==> $iteratorClass over a set of $count integers" . PHP_EOL;
    $memStart = linuxRssUsage();
    $start = microtime(true);
    $result = stressIterator($iteratorClass, $count);
    $duration = microtime(true) - $start;
    $mem = linuxRssUsage() - $memStart;
    printf("Time: %0.4f seconds\nMemory: %d bytes\n", $duration, $mem);
    if (count($result) > 0) {
        gc_collect_cycles();
        flush();
        sleep(1);
    }
}

function benchmarkIteratorObjects(string $iteratorClass, int $count)
{
    $objects = [];
    for ($i = 0; $i < $count; $i++) {
        $objects[] = new StdClass;
    }
    echo "==> $iteratorClass over a set of $count objects" . PHP_EOL;
    $memStart = linuxRssUsage();
    $start = microtime(true);
    $result = stressIteratorObjects($iteratorClass, $objects);
    $duration = microtime(true) - $start;
    $mem = linuxRssUsage() - $memStart;
    printf("Time: %0.4f seconds\nMemory: %d bytes\n", $duration, $mem);
    if (count($result) > 0) {
        gc_collect_cycles();
        flush();
        sleep(1);
    }
}

const K = 1000;
$count = 500 * K;

//benchmarkArray($count);
//benchmarkSplObjectStorage($count);

//benchmarkIterator('FastRemovalIterator', $count);
benchmarkIteratorObjects('PredefinedKeyPositionIterator', $count);
//benchmarkIteratorObjects('FastRemovalIterator', $count);
